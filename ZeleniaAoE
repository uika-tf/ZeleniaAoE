<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ゼレニアツール</title>
    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            font-family: Arial, sans-serif;
            margin: 20px;
        }

        .container {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        canvas {
            border: 1px solid black;
        }

        .controls {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .controls button {
            padding: 10px;
            font-size: 16px;
        }
    </style>
</head>
<body>

    <h1>ゼレニアAoEツール</h1>
    <div class="container">
        <canvas id="canvas" width="500" height="500"></canvas>
        <div class="controls">
            <button onclick="updateSettings()">リセット</button>
            <button onclick="rotateCanvas()">魔法陣回転</button>
            <button onclick="toggleOrangeFan()">雷鳴剣</button>
            <button onclick="toggleThunder()">サンダジャ</button>
            <button onclick="toggleBlueFan()">ホーリーハザード</button>
            <div style="display: grid; grid-template-columns: repeat(2, auto); gap: 5px;">
                <button onclick="toggleN()" style="min-width: 80px;">北半面</button>
                <button onclick="toggleS()" style="min-width: 80px;">南半面</button>
                <button onclick="toggleW()" style="min-width: 80px;">西半面</button>
                <button onclick="toggleE()" style="min-width: 80px;">東半面</button>
            </div>
            <button onclick="saveImage()">PNGとして保存</button>
        </div>
    </div>

    <script>
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');

        const width = 500;
        const height = 500;
        canvas.width = width;
        canvas.height = height;

        const center = { x: width / 2, y: height / 2 };
        const radius = 200;
        const lineWidth = 30;
        const angleStep = Math.PI / 2;

        let ringCount = 2;
        let sectorCount = 8;
        const colors = ["lightgray", "lightpink", "hotpink"];
        const gapSize = 0;
        const segments = [];
        let rotationAngle = 0;
        let overlayMode = 0;
        let orangeFanMode = 0;
        let blueFanMode = 0;
        let showN = false;
        let showS = false;
        let showW = false;
        let showE = false;

        function initializeSegments() {
            segments.length = 0;
            for (let r = 0; r < ringCount; r++) {
                segments.push([]);
                for (let s = 0; s < sectorCount; s++) {
                    segments[r].push(0);
                }
            }
        }

        function drawImage() {
            ctx.clearRect(0, 0, width, height);
            ctx.clearRect(0, 0, width, height);

            ctx.save();
            ctx.translate(center.x, center.y);
            ctx.rotate(rotationAngle * Math.PI / 180);
            ctx.translate(-center.x, -center.y);

            for (let r = 0; r < ringCount; r++) {
                const innerRadius = Math.max((r / ringCount) * radius + gapSize, 30);
                const outerRadius = ((r + 1) / ringCount) * radius - gapSize;

                for (let s = 0; s < sectorCount; s++) {
                    const startAngle = (s / sectorCount) * 2 * Math.PI;
                    const endAngle = ((s + 1) / sectorCount) * 2 * Math.PI;

                    const colorIndex = segments[r][s];
                    ctx.fillStyle = colors[colorIndex];

                    ctx.beginPath();
                    ctx.arc(center.x, center.y, outerRadius, startAngle, endAngle);
                    ctx.arc(center.x, center.y, innerRadius, endAngle, startAngle, true);
                    ctx.closePath();
                    ctx.fill();

                    ctx.strokeStyle = "white";
                    ctx.lineWidth = 4;
                    ctx.globalCompositeOperation = 'destination-out';
                    ctx.stroke();
                    ctx.globalCompositeOperation = 'source-over';
                }
            }
            ctx.restore();
            if (orangeFanMode !== 0) drawOrangeFan();

            if (blueFanMode !== 0) drawBlueFan();

            if (overlayMode === 1 || overlayMode === 2) drawOverlay();
            drawQuadrants();
        }

        function drawOrangeFan() {
            ctx.save();
            ctx.globalAlpha = 0.2;
            ctx.fillStyle = 'orangered';

            const orangeFanAngle = orangeFanMode * 60;

            const start = (orangeFanAngle) * Math.PI / 180;
            const end = (orangeFanAngle + 60) * Math.PI / 180;
            ctx.beginPath();
            ctx.moveTo(center.x, center.y);
            ctx.arc(center.x, center.y, radius, start, end);
            ctx.closePath();
            ctx.fill();
            ctx.restore();
        }

        function drawBlueFan() {
            ctx.save();
            ctx.globalAlpha = 0.2;
            ctx.fillStyle = 'blue';

            const blueFanAngle = blueFanMode * 120;

            for (let i = 0; i < 2; i++) {
                const start = (blueFanAngle + i * 180) * Math.PI / 180;
                const end = (blueFanAngle + i * 180 + 120) * Math.PI / 180;
                ctx.beginPath();
                ctx.moveTo(center.x, center.y);
                ctx.arc(center.x, center.y, radius, start, end);
                ctx.closePath();
                ctx.fill();
            }
            ctx.restore();
        }

        function drawOverlay() {
            ctx.save();
            ctx.globalAlpha = 0.2;
            if (overlayMode === 1) {
                ctx.fillStyle = "indigo";
                ctx.beginPath();
                ctx.arc(center.x, center.y, radius * 0.5, 0, 2 * Math.PI);
                ctx.fill();
            } else if (overlayMode === 2) {
                ctx.strokeStyle = "indigo";
                ctx.lineWidth = radius * 0.5;
                ctx.beginPath();
                ctx.arc(center.x, center.y, radius * 0.75, 0, 2 * Math.PI);
                ctx.stroke();
            }
            ctx.restore();
        }

        function drawQuadrants() {
            ctx.save();
            ctx.globalAlpha = 0.2;
            ctx.fillStyle = "orange";
            const halfW = width / 2;
            const halfH = height / 2;
            if (showN) ctx.fillRect(0, 0, width, halfH);
            if (showS) ctx.fillRect(0, halfH, width, halfH);
            if (showW) ctx.fillRect(0, 0, halfW, height);
            if (showE) ctx.fillRect(halfW, 0, halfW, height);
            ctx.restore();
        }

        canvas.addEventListener("click", (event) => {
            const rect = canvas.getBoundingClientRect();
            const x = event.clientX - rect.left;
            const y = event.clientY - rect.top;
            const dx = x - center.x;
            const dy = y - center.y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            const angle = Math.atan2(dy, dx);

            const adjustedAngle = (angle - rotationAngle * Math.PI / 180 + 2 * Math.PI) % (2 * Math.PI);

            let ringIndex = -1;
            for (let r = 0; r < ringCount; r++) {
                const innerRadius = Math.max((r / ringCount) * radius + gapSize, 30);
                const outerRadius = ((r + 1) / ringCount) * radius - gapSize;
                if (distance >= innerRadius && distance < outerRadius) {
                    ringIndex = r;
                    break;
                }
            }
            if (ringIndex === -1) return;

            const sectorIndex = Math.floor((adjustedAngle / (2 * Math.PI)) * sectorCount);

            segments[ringIndex][sectorIndex] = (segments[ringIndex][sectorIndex] + 1) % colors.length;

            drawImage();
        });

        function updateSettings() {
            rotationAngle = 0;
            orangeFanMode = 0;
            blueFanMode = 0;
            overlayMode = 0;
            showN = showS = showW = showE = false;
            initializeSegments();
            drawImage();
        }

        function rotateCanvas() {
            rotationAngle = (rotationAngle + 22.5) % 360;
            drawImage();
        }

        function toggleThunder() {
            overlayMode = (overlayMode + 1) % 3;
            drawImage();
        }

        function toggleOrangeFan() {
            orangeFanMode = (orangeFanMode + 1) % 7;
            drawImage();
        }

        function toggleBlueFan() {
            blueFanMode = (blueFanMode + 1) % 4;
            drawImage();
        }

        function toggleN() {
            showN = !showN;
            drawImage();
        }

        function toggleS() {
            showS = !showS;
            drawImage();
        }

        function toggleW() {
            showW = !showW;
            drawImage();
        }

        function toggleE() {
            showE = !showE;
            drawImage();
        }


        function saveImage() {
            const link = document.createElement("a");
            link.download = "zelenia.png";
            link.href = canvas.toDataURL();
            link.click();
        }

        initializeSegments();
        drawImage();
    </script>

</body>
</html>
